classdef Simio < SimioEnv
%SIMIO Environment for monkey training
%   Simio has three essential functions. To detect external events such
%   as lever presses and eye movements though a DAQ and through
%   ethernet, to display stimuli on the screen using PsychToolbox, and
%   to mark important times with event codes through the DAQ.
    
    properties
        
        % Configuration information (defaults)
        config = struct(                        ...
            'itiDuration',       2000,          ...
            'experimentName',    'experiment',  ...
            'subjectName',       'subject',     ...
            'osdHeight',         200,           ...
            'backgroundColor',   [0   0   0],   ...
            'osdBackgroundColor',[0   0   0],   ...
            'fixationPointColor',[255 255 255], ...
            'fixationWindowSize',4,             ...
            'calibrationColor',  [255 255 255], ...
            'calibrationSize',   1,             ...
            'calibrationWidth',  .5,            ...
            'calibrationEcc',    6,             ...
            'cueColor',          [255 255 255], ...
            'trackedEye',        'right',       ...
            'dataPath',          '.',           ...
            'fileName',          '',            ...
            'screen',            0,             ...
            'screenDistanceCm',  47,            ...
            'screenWidthCm',     37.4,          ...
            'screenHeightCm',    30,            ...
            'screenElevationCm', 61,            ... 
            'eyeElevationCm',    73,            ...
            'daqAdaptor',        'nidaq',       ...
            'daqID',             'Dev1');
        
        % Event codes (defaults)
        codes = struct(                         ...
            'correct',           0,             ...
            'beginITI',          16,            ...
            'endITI',            17,            ...
            'beginTrial',        10,            ...
            'endTrial',          11,            ...
            'reward',            26,            ...
            'displayUpdate',     27,            ...
            'screenClear',       28);
        
    end

    methods
        
        % Constructor for the simio class
        function self = Simio(varargin)
           
            % Extract and store configuration information
            for arg = 1:2:numel(varargin)
                switch varargin{arg}
                    case 'config'
                        self.userConfig(varargin{arg+1});
                    case 'codes'
                        self.userCodes(varargin{arg+1});
                    otherwise
                        disp([varargin{arg} ' is not a valid parameter']);
                end
            end
            
            % Inherit SimioEnv
            self@SimioEnv('config', self.config, 'codes', self.codes);
            
        end
        
        
        % Add user-supplied config information, overriding defaults
        function userConfig(self, newConfig)
            
            % Get the field names from the user supplied config
            names = fieldnames(newConfig);
            
            % Iterate through the field names, and add to config
            for field = 1:numel(names)
                self.config.(names{field}) = newConfig.(names{field});
            end
            
        end
        
        % Add user-supplied config information, overriding defaults
        function userCodes(self, newCodes)
            
            % Get the field names from the user supplied config
            names = fieldnames(newCodes);
            
            % Iterate through the field names, and add to config
            for field = 1:numel(names)
                self.codes.(names{field}) = newCodes.(names{field});
            end
            
        end
        
        
        
    end
end

